#!/bin/bash
#
# Punica - LwM2M server with REST API
# Copyright (C) 2018 8devices
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

set -e

source "$(cd $(dirname "$0") && pwd -P)/.utils"

CERTIFICATE_SETTINGS_TEMPLATE="${PROJECT_ROOT_DIR}/tests/rest/certificate_template.cfg"
KEY_DIR="${PROJECT_ROOT_DIR}/tests/rest/keys"
TEST_PRIVATE_KEY="${KEY_DIR}/private.key"
TEST_CERTIFICATE="${KEY_DIR}/certificate.pem"
OTHER_TEST_PRIVATE_KEY="${KEY_DIR}/other_private.key"
OTHER_TEST_CERTIFICATE="${KEY_DIR}/other_certificate.pem"
ECDSA_TEST_PRIVATE_KEY="${KEY_DIR}/ecdsa.key"
ECDSA_TEST_CERTIFICATE="${KEY_DIR}/ecdsa.pem"

CERTTOOL_BIN="certtool"

build_test_plugins () {
    TEST_PLUGINS_DIR=$( cd "${PROJECT_ROOT_DIR}/tests/rest/plugins"; pwd )

    for plugin in ${TEST_PLUGINS_DIR}/*/; do
        plugin_build_dir="${plugin}build"
        mkdir -p ${plugin_build_dir} || true
        cd ${plugin_build_dir}
        cmake ../
        make clean
        make
        cd -
    done

    return 0
}

generate_key_and_certificate () {
    if [ "$#" -ne 3 ]; then
        echo_and_log "Illegal number of parameters"
        return 1
    fi

    if [ -z "$1" ]; then
        echo_and_log "Private key file name argument is missing or is invalid"
        return 1
    fi

    if [ -z "$2" ]; then
        echo_and_log "Certificate file name argument is missing or is invalid"
        return 1
    fi

    if [ -z "$3" ]; then
        echo_and_log "Certificate template file name argument is missing or is invalid"
        return 1
    fi

    {
        eval "${CERTTOOL_BIN} --generate-privkey --outfile $1" &&
        eval "${CERTTOOL_BIN} --generate-self-signed --load-privkey $1 --outfile $2 --template $3"
    } >> ${LOG_FILE} 2>&1 || {
        echo_stderr "Failed to generate private key and certificate!"
        echo_stderr "Refer to \"${LOG_FILE}\" for more detailed information"
        return 1
    }

    return 0
}

generate_key_and_certificate_ecdsa () {
    if [ "$#" -ne 2 ]; then
        echo_and_log "Illegal number of parameters"
        return 1
    fi

    if [ -z "$1" ]; then
        echo_and_log "Private key file name argument is missing or is invalid"
        return 1
    fi

    if [ -z "$2" ]; then
        echo_and_log "Certificate file name argument is missing or is invalid"
        return 1
    fi

    openssl ecparam -name prime256v1 -genkey -out $1

    openssl req -new -x509 -key $1 -out $2 -days 365 -subj '/CN=localhost'

    return 0
}

get_path_level() {
    ROOT_DIR="$(cd / && pwd -P)"
    level=0

    if ! [ -d "$1" ]; then
        full_path="$(cd $(dirname "$1") && pwd -P)"
    else
        full_path="$(cd "$1" && pwd -P)"
    fi
    current_path=${full_path}

    while [ "${current_path}" != "${ROOT_DIR}" ]; do
        level=$(( ${level} + 1 ));
        current_path="$(dirname ${current_path})"
    done

    echo "${level}"
}

run_punica () {
    initial_punica_arguments=""
    punica_command="${BUILD_DIR}/punica ${initial_punica_arguments}"

    if ! [ -z "$1" ]; then
        strip_level="$(get_path_level ${PROJECT_ROOT_DIR})"
        coverage_prefix="GCOV_PREFIX_STRIP=${strip_level} GCOV_PREFIX=$1"
        punica_command="${coverage_prefix} ${punica_command}"
    fi

    if ! [ -z "$2" ]; then
        punica_arguments="$2"
        punica_command="${punica_command} ${punica_arguments}"
    fi

    eval "${punica_command} > /dev/null &"

    echo $!
}

stop_punica () {
    local time_left=10
    local interval=0.1

    # send SIGINT signal to PID, log any output, early return if command fails
    eval "kill -2 $1" >> ${LOG_FILE} 2>&1 || return 0

    # check if PID file exists, every {interval} seconds,
    # until {time_left} reaches 0 seconds.
    while [ -e /proc/$1 ]
    do
        sleep ${interval}
        # bc is used to support floating point precision arithmetics
        time_left=$( echo ${time_left} - ${interval} | bc )
        comparison_status=$(echo "${time_left} <= 0" | bc)
        if [ ${comparison_status} -eq 1 ]; then
            # Warn about processes that fail to stop during timeout
            echo "WARNING! Timeout is reached when waiting for PID $1 to stop!"
            break
        fi
    done
}

sudo -v

echo_and_log "==> Checking code style..."
eval "${SCRIPTS_DIR}/format_style.sh --dry-run" >> ${LOG_FILE} 2>&1

if [ ! -x "${BUILD_DIR}/punica" ]
then
    echo_and_log "Punica binary not found!"
    exit 1
fi

echo_and_log "==> Building test plugins..."
build_test_plugins

echo_and_log "==> Generating security files..."
if [ ! -d "${KEY_DIR}" ]; then
    eval "mkdir ${KEY_DIR}"
fi
generate_key_and_certificate ${TEST_PRIVATE_KEY} ${TEST_CERTIFICATE} ${CERTIFICATE_SETTINGS_TEMPLATE}
generate_key_and_certificate ${OTHER_TEST_PRIVATE_KEY} ${OTHER_TEST_CERTIFICATE} ${CERTIFICATE_SETTINGS_TEMPLATE}
generate_key_and_certificate_ecdsa ${ECDSA_TEST_PRIVATE_KEY} ${ECDSA_TEST_CERTIFICATE}

echo_and_log "==> Starting punica(-s)..."
REGULAR_PUNICA_PID=$(run_punica "regular")
SECURE_PUNICA_PID=$(run_punica "secure" "-c ${PROJECT_ROOT_DIR}/tests/rest/secure.cfg -d ${PROJECT_ROOT_DIR}/tests/rest/database.json")
PLUGINS_PUNICA_PID=$(run_punica "plugins" "-c ./tests/rest/plugins.cfg")

echo_and_log "==> Running coverage tests..."
test_status=1
if eval "cd ${PROJECT_ROOT_DIR}/tests/rest" && npm install && npm test
then
    test_status=0
fi
cd -

echo_and_log "==> Stopping punica(-s)..."
stop_punica $REGULAR_PUNICA_PID
stop_punica $SECURE_PUNICA_PID
stop_punica $PLUGINS_PUNICA_PID

echo_and_log "Finished testing!"

exit $test_status
