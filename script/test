#!/bin/sh
#
# Punica - LwM2M server with REST API
# Copyright (C) 2018 8devices
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

set -e

PROJECT_ROOT_DIR="$(cd $(dirname "$0")/.. && pwd -P)"
SCRIPTS_DIR="${PROJECT_ROOT_DIR}/script"

if [ -z "${BUILD_DIR}" ]; then
    BUILD_DIR="${PROJECT_ROOT_DIR}/build"
fi

if [ -z "${PREFIX_PATH_DIR}" ]; then
    PREFIX_PATH_DIR="${BUILD_DIR}"
fi

SCRIPT_NAME=$(basename -- "$0")
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")

if [ -z "${LOG_FILE}" ]; then
    LOG_FILE="${PROJECT_ROOT_DIR}/${SCRIPT_NAME}_${TIMESTAMP}.log"
else
    export LOG_FILE
fi

CERTIFICATE_SETTINGS_TEMPLATE="${PROJECT_ROOT_DIR}/tests/rest/certificate_template.cfg"
TEST_PRIVATE_KEY="${PROJECT_ROOT_DIR}/private.key"
TEST_CERTIFICATE="${PROJECT_ROOT_DIR}/certificate.pem"
OTHER_TEST_PRIVATE_KEY="${PROJECT_ROOT_DIR}/other_private.key"
OTHER_TEST_CERTIFICATE="${PROJECT_ROOT_DIR}/other_certificate.pem"

CERTTOOL_BIN="certtool"

generate_key_and_certificate () {
    if [ "$#" -ne 3 ]; then
        echo "Illegal number of parameters"
        return 1
    fi

    if [ -z "$1" ]; then
        echo "Private key file name argument is missing or is invalid"
        return 1
    fi

    if [ -z "$2" ]; then
        echo "Certificate file name argument is missing or is invalid"
        return 1
    fi

    if [ -z "$3" ]; then
        echo "Certificate template file name argument is missing or is invalid"
        return 1
    fi

    {
        eval "${CERTTOOL_BIN} --generate-privkey --outfile $1" &&
        eval "${CERTTOOL_BIN} --generate-self-signed --load-privkey $1 --outfile $2 --template $3"
    } >> ${LOG_FILE} 2>&1 || {
        (>&2 echo "Failed to generate private key and certificate!")
        (>&2 echo "\n\nRefer to \"${LOG_FILE}\" for more detailed information")
        return 1
    }

    return 0
}

get_path_level() {
    ROOT_DIR="$(cd / && pwd -P)"
    level=0

    if ! [ -d "$1" ]; then
        full_path="$(cd $(dirname "$1") && pwd -P)"
    else
        full_path="$(cd "$1" && pwd -P)"
    fi
    current_path=${full_path}

    while [ "${current_path}" != "${ROOT_DIR}" ]; do
        level=$(( ${level} + 1 ));
        current_path="$(dirname ${current_path})"
    done

    echo "${level}"
}

run_punica () {
    initial_punica_arguments=""
    punica_command="${BUILD_DIR}/punica ${initial_punica_arguments}"

    if ! [ -z "$1" ]; then
        strip_level="$(get_path_level ${PROJECT_ROOT_DIR})"
        coverage_prefix="GCOV_PREFIX_STRIP=${strip_level} GCOV_PREFIX=$1"
        punica_command="${coverage_prefix} ${punica_command}"
    fi

    if ! [ -z "$2" ]; then
        punica_arguments="$2"
        punica_command="${punica_command} ${punica_arguments}"
    fi

    eval "${punica_command} > /dev/null &"

    echo $!
}

stop_punica () {
    eval "kill -2 $1"
    wait $1 || true
}

echo "==> Checking code style..."
eval "${SCRIPTS_DIR}/format_style.sh --dry-run" >> ${LOG_FILE} 2>&1

if [ ! -x "${BUILD_DIR}/punica" ]
then
    echo "Punica binary not found!"
    exit 1
fi

echo "==> Generating security files..."
generate_key_and_certificate ${TEST_PRIVATE_KEY} ${TEST_CERTIFICATE} ${CERTIFICATE_SETTINGS_TEMPLATE}
generate_key_and_certificate ${OTHER_TEST_PRIVATE_KEY} ${OTHER_TEST_CERTIFICATE} ${CERTIFICATE_SETTINGS_TEMPLATE}

eval "cp ${PROJECT_ROOT_DIR}/tests/rest/database.json ${PROJECT_ROOT_DIR}/tests/rest/_database.json"

echo "==> Starting punica(-s)..."
REGULAR_PUNICA_PID=$(run_punica "regular" "-d ${PROJECT_ROOT_DIR}/tests/rest/_database.json")
SECURE_PUNICA_PID=$(run_punica "secure" "-c ${PROJECT_ROOT_DIR}/tests/rest/secure.cfg")

echo "==> Running coverage tests..."
if eval "cd ${PROJECT_ROOT_DIR}/tests/rest" && npm install && npm test
then
    coverage_tests_status=0
else
    coverage_tests_status=1
fi
cd -

echo "==> Stopping punica(-s)..."
stop_punica $REGULAR_PUNICA_PID
stop_punica $SECURE_PUNICA_PID
eval "rm -f ${PROJECT_ROOT_DIR}/tests/rest/_database.json"

echo "Finished testing!"
