#!/bin/bash
#
# Punica - LwM2M server with REST API
# Copyright (C) 2018 8devices
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

set -e

source "$(cd $(dirname "$0") && pwd -P)/.utils"

BUILD_TOOLS="git cmake build-essential automake libtool gnutls-bin"
DEPENDANT_LIBRARIES="libssl-dev libgnutls28-dev libmicrohttpd-dev uuid-dev"

JANSSON_DIR="${THIRD_PARTY_DIR}/jansson"
LIBJWT_DIR="${THIRD_PARTY_DIR}/libjwt"
CURL_DIR="${THIRD_PARTY_DIR}/curl"
ULFFIUS_DIR="${THIRD_PARTY_DIR}/ulfius"
WAKAAMA_DIR="${THIRD_PARTY_DIR}/wakaama"

PREFIX_PATH_DIR=$BUILD_DIR
AUTORECONF_ARGS_BASE="--prepend-include=${PREFIX_PATH_DIR} -i"
CONFIGURE_ARGS_BASE="--enable-silent-rules --disable-dependency-tracking --prefix ${PREFIX_PATH_DIR}"
CMAKE_ARGS_BASE="-DCMAKE_INSTALL_PREFIX=${PREFIX_PATH_DIR} -DCMAKE_PREFIX_PATH=${PREFIX_PATH_DIR}"
MAKE_ARGS_BASE=""

CONFIGURE_ARGS_BASE="${CONFIGURE_ARGS_BASE} --enable-static=yes --enable-shared=no"

library_error () {
    echo_stderr "Failed to install $1!"
    echo_stderr ""
    echo_stderr "For more information refer to \"${LOG_FILE}\""

    exit 1
}

update_submodules () {
    eval "cd ${PROJECT_ROOT_DIR}"

    git submodule update --init --recursive ||
    (
        echo_stderr "Failed to update submodules!"
        return 1
    )

    cd -
}

install_submodules () {
    install_jansson
    install_libjwt
    install_curl
    install_ulfius
    install_wakaama
}

install_jansson () {
    local cmake_args="${CMAKE_ARGS_BASE} -DJANSSON_WITHOUT_TESTS=on -DJANSSON_BUILD_DOCS=off -DJANSSON_EXAMPLES=off -DJANSSON_BUILD_MAN=off"

    echo_and_log "    - Installing Jansson..."

    eval "rm -rf ${JANSSON_DIR}/build"
    eval "mkdir ${JANSSON_DIR}/build"
    eval "cd ${JANSSON_DIR}/build"

    {
        eval "cmake ../ ${cmake_args}" &&
        eval "make ${MAKE_ARGS_BASE}" &&
        eval "make install ${MAKE_ARGS_BASE}" &&
        cd -
    } >> ${LOG_FILE} 2>&1 || {
        library_error "Jansson"
        return 1
    }
}

install_libjwt () {
    local configure_args="${CONFIGURE_ARGS_BASE} --disable-doxygen-doc PKG_CONFIG_PATH=${PREFIX_PATH_DIR}/lib/pkgconfig"

    echo_and_log "    - Installing JWT..."

    eval "cd ${LIBJWT_DIR}"

    {
        eval "autoreconf ${AUTORECONF_ARGS_BASE}" &&
        eval "./configure ${configure_args}" &&
        eval "make clean ${MAKE_ARGS_BASE}" &&
        eval "make all ${MAKE_ARGS_BASE}" &&
        eval "make install ${MAKE_ARGS_BASE}" &&
        cd -
    } >> ${LOG_FILE} 2>&1 || {
        library_error "JWT"
        return 1
    }
}

install_curl () {
    local configure_args="${CONFIGURE_ARGS_BASE} --without-ssl --with-gnutls  --disable-ares --disable-manual --disable-proxy --disable-verbose --disable-versioned-symbols --enable-hidden-symbols --without-libidn2 --without-librtmp --disable-ldap"

    echo_and_log "    - Installing Curl..."

    eval "cd ${CURL_DIR}"

    {
        eval "${CURL_DIR}/buildconf" &&
        eval "./configure ${configure_args}" &&
        eval "make clean ${MAKE_ARGS_BASE}" &&
        eval "make ${MAKE_ARGS_BASE}" &&
        eval "make install ${MAKE_ARGS_BASE}" &&
        cd -
    } >> ${LOG_FILE} 2>&1 || {
        library_error "Curl"
        return 1
    }
}

install_ulfius () {
    local cmake_args="${CMAKE_ARGS_BASE} -DWITH_YDER=off -DBUILD_UWSC=off -DWITH_GNUTLS=on -DWITH_CURL=on -DBUILD_STATIC=on"

    echo_and_log "    - Installing Ulfius..."

    eval "rm -rf ${ULFFIUS_DIR}/build"
    eval "mkdir ${ULFFIUS_DIR}/build"
    eval "cd ${ULFFIUS_DIR}/build"

    {
        eval "cmake ../ ${cmake_args}" &&
        eval "make clean ${MAKE_ARGS_BASE}" &&
        eval "make ${MAKE_ARGS_BASE}" &&
        eval "make install ${MAKE_ARGS_BASE}" &&
        cd -
    } >> ${LOG_FILE} 2>&1 || {
        library_error "Ulfius"
        return 1
    }
}

install_wakaama () {
    local cmake_args="${CMAKE_ARGS_BASE} -DCUSTOM_CONNECTION_HANDLING=1"

    echo_and_log "    - Installing Wakaama..."

    {
        eval "${WAKAAMA_DIR}/script/setup ${cmake_args}" &&
        eval "cd ${WAKAAMA_DIR}/build" &&
        eval "make install ${MAKE_ARGS_BASE}" &&
        cd -
    } >> ${LOG_FILE} 2>&1 || {
        library_error "Wakaama"
        return 1
    }
}

sudo -v

eval "rm -rf ${BUILD_DIR}"
eval "mkdir -p ${BUILD_DIR}"

echo_and_log "==> Installing building tools..."
install_software "${BUILD_TOOLS}"

echo_and_log "==> Installing dependant libraries..."
install_software "${DEPENDANT_LIBRARIES}"

echo_and_log "==> Updating submodules..."
update_submodules >> ${LOG_FILE}

echo_and_log "==> Installing submodules..."
install_submodules

echo_and_log "Finished bootstrapping!"
